import { useState } from 'react'
import './RoomFilter.css'

function RoomFilter({ onFilter, onReset }) {
  const [showFilter, setShowFilter] = useState(true)
  const [filters, setFilters] = useState({
    roomTypes: [],
    minPrice: '',
    maxPrice: '',
    areas: [],
    amenities: [],
    capacity: null,
    availability: null
  })

  const roomTypeOptions = [
    { value: 'Nh√† tr·ªç', label: 'Nh√† tr·ªç, ph√≤ng tr·ªç' },
    { value: 'Nh√† nguy√™n cƒÉn', label: 'Nh√† nguy√™n cƒÉn' },
    { value: 'CƒÉn h·ªô', label: 'CƒÉn h·ªô' }
  ]

  const priceRanges = [
    { label: 'D∆∞·ªõi 1 tri·ªáu', min: 0, max: 1000000 },
    { label: '1-10 tri·ªáu', min: 1000000, max: 10000000 },
    { label: '10-30 tri·ªáu', min: 10000000, max: 30000000 },
    { label: '30-50 tri·ªáu', min: 30000000, max: 50000000 }
  ]

  const areaOptions = [
    { value: '<15', label: '<15m¬≤' },
    { value: '15-20', label: '15-20m¬≤' },
    { value: '20-30', label: '20-30m¬≤' },
    { value: '>30', label: '>30m¬≤' }
  ]

  const amenityOptions = [
    { value: 'C√≥ g√°c l·ª≠ng', label: 'C√≥ g√°c l·ª≠ng' },
    { value: 'C√≥ nh√† v·ªá sinh ri√™ng', label: 'C√≥ nh√† v·ªá sinh ri√™ng' },
    { value: 'C√≥ ban c√¥ng', label: 'C√≥ ban c√¥ng' },
    { value: 'C√≥ m√°y l·∫°nh', label: 'C√≥ m√°y l·∫°nh / ƒëi·ªÅu h√≤a' },
    { value: 'C√≥ n√≥ng l·∫°nh', label: 'C√≥ n√≥ng l·∫°nh' },
    { value: 'C√≥ wifi', label: 'C√≥ wifi' },
    { value: 'Cho n·∫•u ƒÉn', label: 'Cho n·∫•u ƒÉn' },
    { value: 'C√≥ n·ªôi th·∫•t', label: 'C√≥ n·ªôi th·∫•t c∆° b·∫£n' },
    { value: 'G·ª≠i xe', label: 'G·ª≠i xe' }
  ]

  const capacityOptions = [
    { value: 1, label: '1 ng∆∞·ªùi' },
    { value: 2, label: '2 ng∆∞·ªùi' },
    { value: 3, label: '3-4 ng∆∞·ªùi' },
    { value: 4, label: '4+ ng∆∞·ªùi' }
  ]

  const availabilityOptions = [
    { value: 'C√≤n tr·ªëng', label: 'C√≤n tr·ªëng' },
    { value: 'S·∫Øp tr·ªëng', label: 'S·∫Øp tr·ªëng' }
  ]

  const handleRoomTypeChange = (type) => {
    setFilters(prev => ({
      ...prev,
      roomTypes: prev.roomTypes.includes(type)
        ? prev.roomTypes.filter(t => t !== type)
        : [...prev.roomTypes, type]
    }))
  }

  const handlePriceRangeClick = (range) => {
    setFilters(prev => ({
      ...prev,
      minPrice: range.min.toString(),
      maxPrice: range.max.toString()
    }))
  }

  const handleAreaChange = (area) => {
    setFilters(prev => ({
      ...prev,
      areas: prev.areas.includes(area)
        ? prev.areas.filter(a => a !== area)
        : [...prev.areas, area]
    }))
  }

  const handleAmenityChange = (amenity) => {
    setFilters(prev => ({
      ...prev,
      amenities: prev.amenities.includes(amenity)
        ? prev.amenities.filter(a => a !== amenity)
        : [...prev.amenities, amenity]
    }))
  }

  const handleApplyFilter = () => {
    onFilter(filters)
  }

  const handleResetFilter = () => {
    const resetFilters = {
      roomTypes: [],
      minPrice: '',
      maxPrice: '',
      areas: [],
      amenities: [],
      capacity: null,
      availability: null
    }
    setFilters(resetFilters)
    onReset()
  }

  return (
    <div className="room-filter">
      <div className="filter-header">
        <h3 className="filter-title">üîç L·ªçc t√¨m ki·∫øm</h3>
        <button 
          className="filter-toggle"
          onClick={() => setShowFilter(!showFilter)}
        >
          {showFilter ? '‚ñ≤' : '‚ñº'}
        </button>
      </div>

      {showFilter && (
        <div className="filter-content">
          {/* Lo·∫°i h√¨nh */}
          <div className="filter-section">
            <button 
              className="filter-section-header"
              onClick={(e) => e.currentTarget.parentElement.classList.toggle('collapsed')}
            >
              <span className="filter-section-title">Lo·∫°i h√¨nh</span>
              <span className="filter-section-arrow">‚ñº</span>
            </button>
            <div className="filter-section-content">
              {roomTypeOptions.map(option => (
                <label key={option.value} className="filter-checkbox">
                  <input
                    type="checkbox"
                    checked={filters.roomTypes.includes(option.value)}
                    onChange={() => handleRoomTypeChange(option.value)}
                  />
                  <span className="checkbox-label">{option.label}</span>
                </label>
              ))}
            </div>
          </div>

          {/* M·ª©c gi√° */}
          <div className="filter-section">
            <button 
              className="filter-section-header"
              onClick={(e) => e.currentTarget.parentElement.classList.toggle('collapsed')}
            >
              <span className="filter-section-title">M·ª©c gi√°</span>
              <span className="filter-section-arrow">‚ñº</span>
            </button>
            <div className="filter-section-content">
              <div className="price-inputs">
                <div className="price-input-group">
                  <label>Gi√° th·∫•p nh·∫•t</label>
                  <input
                    type="number"
                    placeholder="0"
                    min="0"
                    value={filters.minPrice}
                    onChange={(e) => setFilters({...filters, minPrice: e.target.value})}
                    className="price-input"
                  />
                </div>
                <div className="price-input-group">
                  <label>Gi√° cao nh·∫•t</label>
                  <input
                    type="number"
                    placeholder="Kh√¥ng gi·ªõi h·∫°n"
                    min="0"
                    value={filters.maxPrice}
                    onChange={(e) => setFilters({...filters, maxPrice: e.target.value})}
                    className="price-input"
                  />
                </div>
              </div>
              <div className="price-ranges">
                {priceRanges.map((range, index) => (
                  <button
                    key={index}
                    className="price-range-btn"
                    onClick={() => handlePriceRangeClick(range)}
                  >
                    {range.label}
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* Di·ªán t√≠ch */}
          <div className="filter-section">
            <button 
              className="filter-section-header"
              onClick={(e) => e.currentTarget.parentElement.classList.toggle('collapsed')}
            >
              <span className="filter-section-title">Di·ªán t√≠ch</span>
              <span className="filter-section-arrow">‚ñº</span>
            </button>
            <div className="filter-section-content">
              {areaOptions.map(option => (
                <label key={option.value} className="filter-checkbox">
                  <input
                    type="checkbox"
                    checked={filters.areas.includes(option.value)}
                    onChange={() => handleAreaChange(option.value)}
                  />
                  <span className="checkbox-label">{option.label}</span>
                </label>
              ))}
            </div>
          </div>

          {/* Ti·ªán nghi */}
          <div className="filter-section">
            <button 
              className="filter-section-header"
              onClick={(e) => e.currentTarget.parentElement.classList.toggle('collapsed')}
            >
              <span className="filter-section-title">Ti·ªán nghi</span>
              <span className="filter-section-arrow">‚ñº</span>
            </button>
            <div className="filter-section-content">
              {amenityOptions.map(option => (
                <label key={option.value} className="filter-checkbox">
                  <input
                    type="checkbox"
                    checked={filters.amenities.includes(option.value)}
                    onChange={() => handleAmenityChange(option.value)}
                  />
                  <span className="checkbox-label">{option.label}</span>
                </label>
              ))}
            </div>
          </div>

          {/* S·ª©c ch·ª©a */}
          <div className="filter-section">
            <button 
              className="filter-section-header"
              onClick={(e) => e.currentTarget.parentElement.classList.toggle('collapsed')}
            >
              <span className="filter-section-title">S·ª©c ch·ª©a</span>
              <span className="filter-section-arrow">‚ñº</span>
            </button>
            <div className="filter-section-content">
              {capacityOptions.map(option => (
                <label key={option.value} className="filter-radio">
                  <input
                    type="radio"
                    name="capacity"
                    checked={filters.capacity === option.value}
                    onChange={() => setFilters({...filters, capacity: option.value})}
                  />
                  <span className="radio-label">{option.label}</span>
                </label>
              ))}
            </div>
          </div>

          {/* Ph√≤ng tr·ªëng */}
          <div className="filter-section">
            <button 
              className="filter-section-header"
              onClick={(e) => e.currentTarget.parentElement.classList.toggle('collapsed')}
            >
              <span className="filter-section-title">Ph√≤ng tr·ªëng</span>
              <span className="filter-section-arrow">‚ñº</span>
            </button>
            <div className="filter-section-content">
              {availabilityOptions.map(option => (
                <label key={option.value} className="filter-radio">
                  <input
                    type="radio"
                    name="availability"
                    checked={filters.availability === option.value}
                    onChange={() => setFilters({...filters, availability: option.value})}
                  />
                  <span className="radio-label">{option.label}</span>
                </label>
              ))}
            </div>
          </div>

          {/* Action Buttons */}
          <div className="filter-actions">
            <button className="btn-reset-filter" onClick={handleResetFilter}>
              X√≥a b·ªô l·ªçc
            </button>
            <button className="btn-apply-filter" onClick={handleApplyFilter}>
              √Åp d·ª•ng
            </button>
          </div>
        </div>
      )}
    </div>
  )
}

export default RoomFilter

