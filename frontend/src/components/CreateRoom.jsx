import { useState } from 'react'
import { customToast } from '../utils/customToast.jsx'
import { roomAPI, uploadAPI } from '../services/api'
import './CreateRoom.css'

const CreateRoom = ({ onClose, onSuccess }) => {
  const [formData, setFormData] = useState({
    name: '',
    imageUrl: '',
    additionalImages: [],
    detail: '',
    price: '',
    location: '',
    contact: '',
    roomType: '',
    area: '',
    capacity: '',
    amenities: [],
    availability: 'C√≤n tr·ªëng',
    totalRooms: '1' // Default 1 room
  })
  const [selectedFile, setSelectedFile] = useState(null)
  const [previewUrl, setPreviewUrl] = useState('')
  const [uploading, setUploading] = useState(false)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  const handleAmenityChange = (amenity) => {
    setFormData(prev => ({
      ...prev,
      amenities: prev.amenities.includes(amenity)
        ? prev.amenities.filter(a => a !== amenity)
        : [...prev.amenities, amenity]
    }))
  }

  const handleFileChange = async (e) => {
    const file = e.target.files[0]
    if (!file) return

    // Ki·ªÉm tra lo·∫°i file
    if (!file.type.startsWith('image/')) {
      setError('Vui l√≤ng ch·ªçn file ·∫£nh (jpg, png, gif)')
      return
    }

    // Ki·ªÉm tra k√≠ch th∆∞·ªõc (max 10MB)
    if (file.size > 10 * 1024 * 1024) {
      setError('K√≠ch th∆∞·ªõc ·∫£nh ph·∫£i nh·ªè h∆°n 10MB')
      return
    }

    setSelectedFile(file)
    
    // T·∫°o preview
    const reader = new FileReader()
    reader.onloadend = () => {
      setPreviewUrl(reader.result)
    }
    reader.readAsDataURL(file)

    // Upload ngay
    setUploading(true)
    setError('')
    try {
      const result = await uploadAPI.uploadImage(file)
      // Backend tr·∫£ v·ªÅ relative URL, c·∫ßn th√™m base URL
      const fullImageUrl = result.url.startsWith('http') 
        ? result.url 
        : `http://localhost:8080${result.url}`
      
      setFormData(prev => ({
        ...prev,
        imageUrl: fullImageUrl
      }))
      console.log('Image uploaded:', fullImageUrl)
    } catch (err) {
      console.error('Error uploading image:', err)
      setError('Kh√¥ng th·ªÉ upload ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i!')
      setSelectedFile(null)
      setPreviewUrl('')
    } finally {
      setUploading(false)
    }
  }

  const handleAdditionalImagesUpload = async (e) => {
    const files = Array.from(e.target.files)
    if (files.length === 0) return

    // Validate total images
    const currentTotal = formData.additionalImages.length + (formData.imageUrl ? 1 : 0)
    if (currentTotal + files.length > 10) {
      setError('T·ªëi ƒëa 10 ·∫£nh (1 ·∫£nh ch√≠nh + 9 ·∫£nh ph·ª•)')
      return
    }

    setUploading(true)
    setError('')
    try {
      const uploadPromises = files.map(file => uploadAPI.uploadImage(file))
      const results = await Promise.all(uploadPromises)
      
      const newImageUrls = results.map(result => {
        return result.url.startsWith('http') 
          ? result.url 
          : `http://localhost:8080${result.url}`
      })

      setFormData(prev => ({
        ...prev,
        additionalImages: [...prev.additionalImages, ...newImageUrls]
      }))
      
      console.log(`Uploaded ${files.length} additional images`)
    } catch (err) {
      console.error('Error uploading images:', err)
      setError('Kh√¥ng th·ªÉ upload ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i!')
    } finally {
      setUploading(false)
    }
  }

  const handleRemoveAdditionalImage = (index) => {
    setFormData(prev => ({
      ...prev,
      additionalImages: prev.additionalImages.filter((_, i) => i !== index)
    }))
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    // Validate
    if (!formData.name || !formData.price || !formData.location || !formData.contact) {
      setError('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc')
      return
    }

    setLoading(true)
    setError('')

    try {
      const roomData = {
        ...formData,
        price: parseFloat(formData.price),
        area: formData.area ? parseFloat(formData.area) : null,
        capacity: formData.capacity ? parseInt(formData.capacity) : null,
        totalRooms: formData.totalRooms ? parseInt(formData.totalRooms) : 1,
        amenities: formData.amenities.join(', '), // Convert array to comma-separated string
        additionalImages: JSON.stringify(formData.additionalImages) // Convert array to JSON string
      }

      console.log('=== FRONTEND CREATE ROOM DEBUG ===')
      console.log('Sending room data:', roomData)
      console.log('amenities array:', formData.amenities)
      console.log('amenities string:', formData.amenities.join(', '))
      console.log('=================================')

      const result = await roomAPI.createRoom(roomData)
      console.log('‚úÖ Room created successfully:', result)
      customToast.success('T·∫°o ph√≤ng tr·ªç th√†nh c√¥ng! üè†')
      
      console.log('üìû Calling onSuccess callback to refresh room list...')
      if (onSuccess) {
        await onSuccess()
        console.log('‚úÖ onSuccess callback completed')
      }
      if (onClose) {
        onClose()
        console.log('‚úÖ Modal closed')
      }
    } catch (err) {
      console.error('Error creating room:', err)
      setError(err.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o ph√≤ng tr·ªç')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="modal-overlay">
      <div className="modal-container">
        <div className="modal-header">
          <h2>Th√™m Ph√≤ng Tr·ªç M·ªõi</h2>
          <button className="close-btn" onClick={onClose}>&times;</button>
        </div>

        <form onSubmit={handleSubmit} className="create-room-form">
          {error && <div className="error-message">{error}</div>}

          <div className="form-group">
            <label htmlFor="name">T√™n Ph√≤ng Tr·ªç <span className="required">*</span></label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="VD: Ph√≤ng tr·ªç cao c·∫•p Q1"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="imageFile">·∫¢nh Ph√≤ng Tr·ªç</label>
            <div className="file-upload-wrapper">
              <input
                type="file"
                id="imageFile"
                accept="image/*"
                onChange={handleFileChange}
                className="file-input"
              />
              <label htmlFor="imageFile" className="file-upload-label">
                üìÅ {selectedFile ? selectedFile.name : 'Ch·ªçn ·∫£nh t·ª´ m√°y t√≠nh'}
              </label>
            </div>
            {uploading && (
              <p className="uploading-text">‚è≥ ƒêang t·∫£i ·∫£nh l√™n...</p>
            )}
            {previewUrl && (
              <div className="image-preview">
                <img src={previewUrl} alt="Preview" />
              </div>
            )}
          </div>

          {/* Additional Images */}
          <div className="form-group">
            <label>·∫¢nh ph·ª• (t·ªëi ƒëa 9 ·∫£nh)</label>
            
            {formData.additionalImages.length > 0 && (
              <div className="additional-images-grid">
                {formData.additionalImages.map((imageUrl, index) => (
                  <div key={index} className="additional-image-item">
                    <img src={imageUrl} alt={`Additional ${index + 1}`} />
                    <button
                      type="button"
                      className="btn-remove-additional-image"
                      onClick={() => handleRemoveAdditionalImage(index)}
                      title="X√≥a ·∫£nh"
                    >
                      ‚úï
                    </button>
                  </div>
                ))}
              </div>
            )}

            <input
              type="file"
              accept="image/*"
              multiple
              onChange={handleAdditionalImagesUpload}
              disabled={uploading || formData.additionalImages.length >= 9}
            />
            {uploading && <p className="uploading-text">‚è≥ ƒêang t·∫£i ·∫£nh l√™n...</p>}
            <small style={{ display: 'block', marginTop: '8px', color: 'var(--text-secondary)' }}>
              ƒê√£ upload: {formData.additionalImages.length}/9 ·∫£nh ph·ª•
            </small>
          </div>

          <div className="form-group">
            <label htmlFor="detail">M√¥ T·∫£ Chi Ti·∫øt</label>
            <textarea
              id="detail"
              name="detail"
              value={formData.detail}
              onChange={handleChange}
              placeholder="M√¥ t·∫£ ƒë·∫ßy ƒë·ªß v·ªÅ ph√≤ng tr·ªç: di·ªán t√≠ch, ti·ªán nghi, quy ƒë·ªãnh..."
              rows="4"
            />
          </div>

          <div className="form-group">
            <label htmlFor="price">Gi√° Ph√≤ng (VNƒê/th√°ng) <span className="required">*</span></label>
            <input
              type="number"
              id="price"
              name="price"
              value={formData.price}
              onChange={handleChange}
              placeholder="3000000"
              min="0"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="location">V·ªã Tr√≠ <span className="required">*</span></label>
            <input
              type="text"
              id="location"
              name="location"
              value={formData.location}
              onChange={handleChange}
              placeholder="VD: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM"
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="contact">Th√¥ng Tin Li√™n H·ªá <span className="required">*</span></label>
            <input
              type="text"
              id="contact"
              name="contact"
              value={formData.contact}
              onChange={handleChange}
              placeholder="VD: 0901234567 - Mr. Nguy·ªÖn"
              required
            />
          </div>

          {/* Th√¥ng tin l·ªçc */}
          <div className="form-section-divider">
            <h3>Th√¥ng tin chi ti·∫øt cho b·ªô l·ªçc</h3>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label htmlFor="roomType">Lo·∫°i h√¨nh</label>
              <select
                id="roomType"
                name="roomType"
                value={formData.roomType}
                onChange={handleChange}
              >
                <option value="">-- Ch·ªçn lo·∫°i h√¨nh --</option>
                <option value="Nh√† tr·ªç">Nh√† tr·ªç, ph√≤ng tr·ªç</option>
                <option value="Nh√† nguy√™n cƒÉn">Nh√† nguy√™n cƒÉn</option>
                <option value="CƒÉn h·ªô">CƒÉn h·ªô</option>
              </select>
            </div>

            <div className="form-group">
              <label htmlFor="area">Di·ªán t√≠ch (m¬≤)</label>
              <input
                type="number"
                id="area"
                name="area"
                value={formData.area}
                onChange={handleChange}
                placeholder="VD: 25"
                min="0"
                step="0.1"
              />
            </div>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label htmlFor="capacity">S·ª©c ch·ª©a (ng∆∞·ªùi)</label>
              <input
                type="number"
                id="capacity"
                name="capacity"
                value={formData.capacity}
                onChange={handleChange}
                placeholder="VD: 2"
                min="1"
                max="10"
              />
            </div>

            <div className="form-group">
              <label htmlFor="availability">T√¨nh tr·∫°ng</label>
              <select
                id="availability"
                name="availability"
                value={formData.availability}
                onChange={handleChange}
              >
                <option value="C√≤n tr·ªëng">C√≤n tr·ªëng</option>
                <option value="S·∫Øp tr·ªëng">S·∫Øp tr·ªëng</option>
              </select>
            </div>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label htmlFor="totalRooms">S·ªë l∆∞·ª£ng ph√≤ng <span className="required">*</span></label>
              <input
                type="number"
                id="totalRooms"
                name="totalRooms"
                value={formData.totalRooms}
                onChange={handleChange}
                placeholder="VD: 10"
                min="1"
                required
              />
              <small style={{ color: '#6B7280', fontSize: '13px', marginTop: '4px', display: 'block' }}>
                üí° S·ªë l∆∞·ª£ng ph√≤ng s·∫Ω t·ª± ƒë·ªông gi·∫£m khi c√≥ ng∆∞·ªùi thu√™
              </small>
            </div>
          </div>

          <div className="form-group">
            <label>Ti·ªán nghi</label>
            <div className="amenities-grid">
              {[
                'C√≥ g√°c l·ª≠ng',
                'C√≥ nh√† v·ªá sinh ri√™ng',
                'C√≥ ban c√¥ng',
                'C√≥ m√°y l·∫°nh',
                'C√≥ n√≥ng l·∫°nh',
                'C√≥ wifi',
                'Cho n·∫•u ƒÉn',
                'C√≥ n·ªôi th·∫•t',
                'G·ª≠i xe'
              ].map(amenity => (
                <label key={amenity} className="amenity-checkbox">
                  <input
                    type="checkbox"
                    checked={formData.amenities.includes(amenity)}
                    onChange={() => handleAmenityChange(amenity)}
                  />
                  <span>{amenity}</span>
                </label>
              ))}
            </div>
          </div>

          <div className="form-actions">
            <button type="button" className="btn-cancel" onClick={onClose}>
              H·ªßy
            </button>
            <button type="submit" className="btn-submit" disabled={loading}>
              {loading ? 'ƒêang t·∫°o...' : 'T·∫°o Ph√≤ng Tr·ªç'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

export default CreateRoom

